{"version":3,"sources":["components/SQLEditor/index.less","components/SQLEditor/ace.js","components/SQLEditor/index.jsx","pages/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ace","require","defineDummySnippets","mode","define","snippetText","scope","buildKeywordsFromSchema","schema","tableKeywords","columnKeywords","tableColumnKeywords","forEach","table","push","name","value","score","meta","keywords","columns","column","caption","className","buildTableColumnKeywords","c","map","v","k","tableColumn","schemaCompleterKeywords","updateSchemaCompleter","editorKey","isNil","langTools","setCompleters","snippetCompleter","keyWordCompleter","textCompleter","identifierRegexps","getCompletions","editor","session","pos","prefix","callback","id","length","concat","tableName","substring","editorProps","$blockScrolling","Infinity","SQLEditor","forwardRef","ref","syntax","autocompleteEnabled","onChange","onSelectionChange","props","useState","editorRef","setEditorRef","currentValue","setCurrentValue","useEffect","handleChange","useCallback","str","editorOptions","useMemo","behavioursEnabled","enableSnippets","enableBasicAutocompletion","enableLiveAutocompletion","autoScrollEditorIntoView","editorId","handleSelectionChange","selection","rawSelectedQueryText","doc","getTextRange","getRange","selectedQueryText","initEditor","commands","bindKey","win","mac","on","e","command","args","completer","showPopup","focus","useImperativeHandle","paste","text","replace","range","getValue","setRange","cx","theme","width","height","setOptions","showPrintMargin","wrapEnabled","onLoad","doNothing","IndexPage","JSON","stringify","exampleSchema","schemaString","setSchemaString","setSchema","haveSchemaError","setHaveSchemaError","parse","style","display","fontSize","margin","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.21877446.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.9d29da1e.less\";","import {isNil, map} from \"lodash\";\nimport AceEditor from \"react-ace\";\nimport ace from \"brace\";\n\nimport \"brace/ext/language_tools\";\nimport \"brace/mode/json\";\nimport \"brace/mode/python\";\nimport \"brace/mode/sql\";\nimport \"brace/mode/yaml\";\nimport \"brace/theme/textmate\";\nimport \"brace/ext/searchbox\";\nimport langTools from \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/snippets/sql\";\n// const langTools = ace.require(\"ace/ext/language_tools\");\nconst snippetsModule = ace.require(\"ace/snippets\");\n\n// By default Ace will try to load snippet files for the different modes and fail.\n// We don't need them, so we use these placeholders until we define our own.\nfunction defineDummySnippets(mode) {\n  ace.define(`ace/snippets/${mode}`, [\"require\", \"exports\", \"module\"], (require, exports) => {\n    exports.snippetText = \"\";\n    exports.scope = mode;\n  });\n}\n\ndefineDummySnippets(\"python\");\ndefineDummySnippets(\"sql\");\ndefineDummySnippets(\"json\");\ndefineDummySnippets(\"yaml\");\n\nfunction buildTableColumnKeywords(table) {\n  const keywords = [];\n  table.columns.forEach(column => {\n    keywords.push({\n      caption: column,\n      name: `${table.name}.${column}`,\n      value: `${table.name}.${column}`,\n      score: 100,\n      meta: \"Column\",\n      className: \"completion\",\n    });\n  });\n  return keywords;\n}\n\nfunction buildKeywordsFromSchema(schema) {\n  const tableKeywords = [];\n  const columnKeywords = {};\n  const tableColumnKeywords = {};\n\n  schema.forEach(table => {\n    tableKeywords.push({\n      name: table.name,\n      value: table.name,\n      score: 100,\n      meta: \"Table\",\n    });\n    tableColumnKeywords[table.name] = buildTableColumnKeywords(table);\n    table.columns.forEach(c => {\n      columnKeywords[c] = \"Column\";\n    });\n  });\n\n  return {\n    table: tableKeywords,\n    column: map(columnKeywords, (v, k) => ({\n      name: k,\n      value: k,\n      score: 50,\n      meta: v,\n    })),\n    tableColumn: tableColumnKeywords,\n  };\n}\n\nconst schemaCompleterKeywords = {};\n\nexport function updateSchemaCompleter(editorKey, schema = null) {\n  schemaCompleterKeywords[editorKey] = isNil(schema) ? null : buildKeywordsFromSchema(schema);\n}\n\nlangTools.setCompleters([\n  langTools.snippetCompleter,\n  langTools.keyWordCompleter,\n  langTools.textCompleter,\n  {\n    identifierRegexps: [/[a-zA-Z_0-9.\\-\\u00A2-\\uFFFF]/],\n    getCompletions: (editor, session, pos, prefix, callback) => {\n      const {table, column, tableColumn} = schemaCompleterKeywords[editor.id] || {\n        table: [],\n        column: [],\n        tableColumn: [],\n      };\n\n      if (prefix.length === 0 || table.length === 0) {\n        callback(null, []);\n        return;\n      }\n\n      if (prefix[prefix.length - 1] === \".\") {\n        const tableName = prefix.substring(0, prefix.length - 1);\n        callback(null, table.concat(tableColumn[tableName]));\n        return;\n      }\n      callback(null, table.concat(column));\n    },\n  },\n]);\n\nexport {AceEditor, langTools, snippetsModule};\n","import React, {useState, useEffect, forwardRef, useCallback, useMemo, useImperativeHandle} from \"react\";\nimport cx from \"classnames\";\nimport {AceEditor, updateSchemaCompleter} from \"./ace\";\nimport \"./index.less\"\n\nconst editorProps = {$blockScrolling: Infinity};\n\nconst SQLEditor = forwardRef(function (\n  {className, syntax, value, autocompleteEnabled, schema, onChange, onSelectionChange, ...props},\n  ref\n) {\n  const [editorRef, setEditorRef] = useState(null);\n\n  // For some reason, value for AceEditor should be managed in this way - otherwise it goes berserk when selecting text\n  const [currentValue, setCurrentValue] = useState(value);\n\n  useEffect(() => {\n    setCurrentValue(value);\n  }, [value]);\n\n  const handleChange = useCallback(\n    str => {\n      setCurrentValue(str);\n      onChange(str);\n    },\n    [onChange]\n  );\n\n  const editorOptions = useMemo(\n    () => ({\n      behavioursEnabled: true,\n      enableSnippets: true,\n      enableBasicAutocompletion: true,\n      enableLiveAutocompletion: autocompleteEnabled,\n      autoScrollEditorIntoView: true,\n    }),\n    [autocompleteEnabled]\n  );\n\n  useEffect(() => {\n    if (editorRef) {\n      const editorId = editorRef.editor.id;\n      updateSchemaCompleter(editorId, schema);\n      return () => {\n        updateSchemaCompleter(editorId, null);\n      };\n    }\n  }, [schema, editorRef]);\n\n  const handleSelectionChange = useCallback(\n    selection => {\n      const rawSelectedQueryText = editorRef.editor.session.doc.getTextRange(selection.getRange());\n      const selectedQueryText = rawSelectedQueryText.length > 1 ? rawSelectedQueryText : null;\n      onSelectionChange(selectedQueryText);\n    },\n    [editorRef, onSelectionChange]\n  );\n\n  const initEditor = useCallback(editor => {\n    // Release Cmd/Ctrl+L to the browser\n    editor.commands.bindKey({win: \"Ctrl+L\", mac: \"Cmd+L\"}, null);\n\n    // Release Cmd/Ctrl+Shift+F for format query action\n    editor.commands.bindKey({win: \"Ctrl+Shift+F\", mac: \"Cmd+Shift+F\"}, null);\n\n    // Release Ctrl+P for open new parameter dialog\n    editor.commands.bindKey({win: \"Ctrl+P\", mac: null}, null);\n    // Lineup only mac\n    editor.commands.bindKey({win: null, mac: \"Ctrl+P\"}, \"golineup\");\n\n    // Reset Completer in case dot is pressed\n    editor.commands.on(\"afterExec\", e => {\n      if (e.command.name === \"insertstring\" && e.args === \".\" && editor.completer) {\n        editor.completer.showPopup(editor);\n      }\n    });\n\n    // QuerySnippet.query().then(snippets => {\n    //   const snippetManager = snippetsModule.snippetManager;\n    //   const m = {\n    //     snippetText: \"\",\n    //   };\n    //   m.snippets = snippetManager.parseSnippetFile(m.snippetText);\n    //   snippets.forEach(snippet => {\n    //     m.snippets.push(snippet.getSnippet());\n    //   });\n    //   snippetManager.register(m.snippets || [], m.scope);\n    // });\n\n    editor.focus();\n  }, []);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      paste: text => {\n        if (editorRef) {\n          const {editor} = editorRef;\n          editor.session.doc.replace(editor.selection.getRange(), text);\n          const range = editor.selection.getRange();\n          onChange(editor.session.getValue());\n          editor.selection.setRange(range);\n        }\n      },\n      focus: () => {\n        if (editorRef) {\n          editorRef.editor.focus();\n        }\n      },\n    }),\n    [editorRef, onChange]\n  );\n\n  return (\n    <div className={cx(\"sql-editor-container\", className)} {...props}>\n      <AceEditor\n        ref={setEditorRef}\n        theme=\"textmate\"\n        mode={syntax || \"sql\"}\n        value={currentValue}\n        editorProps={editorProps}\n        width=\"100%\"\n        height=\"100%\"\n        setOptions={editorOptions}\n        showPrintMargin={false}\n        wrapEnabled={false}\n        onLoad={initEditor}\n        onChange={handleChange}\n        onSelectionChange={handleSelectionChange}\n      />\n    </div>\n  );\n});\n\nexport default SQLEditor\n","import AceEditor from \"react-ace\";\nimport SQLEditor from \"components/SQLEditor\";\nimport exampleSchema from \"assets/exampleSchema.json\";\nimport React, {useState, useEffect} from \"react\";\n\nconst doNothing = () => {\n}\n\nfunction IndexPage() {\n  const [schemaString, setSchemaString] = useState(JSON.stringify(exampleSchema.schema, null, 2));\n  const [schema, setSchema] = useState(exampleSchema.schema);\n  const [haveSchemaError, setHaveSchemaError] = useState(false);\n\n  useEffect(() => {\n    try {\n      setSchema(JSON.parse(schemaString))\n      setHaveSchemaError(false)\n    } catch {\n      setHaveSchemaError(true)\n    }\n  }, [schemaString])\n\n  const editorOptions = {\n    behavioursEnabled: true,\n    enableSnippets: true,\n    enableBasicAutocompletion: true,\n    enableLiveAutocompletion: false,\n    autoScrollEditorIntoView: true,\n  }\n\n  return (\n    <div style={{display: \"flex\", height: \"100vh\"}}>\n      <div style={{width: \"300px\"}}>\n        <div style={{fontSize: \"18px\", margin: \"18px 0\", height: \"20px\"}}>\n          <span>Schema: </span>\n          {haveSchemaError ? <span style={{color: \"red\"}}>SchemaError</span> : null}\n        </div>\n        <AceEditor\n          theme=\"textmate\"\n          mode=\"json\"\n          value={schemaString}\n          editorProps={{$blockScrolling: Infinity}}\n          width=\"100%\"\n          height=\"calc(100% - 56px)\"\n          setOptions={editorOptions}\n          showPrintMargin={false}\n          wrapEnabled={false}\n          onChange={setSchemaString}\n        />\n      </div>\n      <div style={{width: \"calc(100% - 300px)\"}}>\n        <div style={{fontSize: \"18px\", margin: \"18px 0\", height: \"20px\"}}>SQL Editor:</div>\n        <SQLEditor\n          style={{height: \"calc(100% - 56px)\"}}\n          className=\"SQLEditor\"\n          schema={schema}\n          autocompleteEnabled={true}\n          onChange={doNothing}\n          onSelectionChange={doNothing} />\n      </div>\n    </div>\n  );\n}\n\nexport default IndexPage\n","import React from \"react\";\nimport \"./App.css\";\nimport IndexPage from \"pages/index\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IndexPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}